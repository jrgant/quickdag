% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qd_dag.R
\name{qd_dag}
\alias{qd_dag}
\title{Generate a graph object}
\usage{
qd_dag(
  edgelist,
  node_labs = NULL,
  node_aes_opts = list(),
  edge_aes_opts = list(),
  verbose = TRUE,
  check_dag = TRUE,
  theme = "base",
  ...
)
}
\arguments{
\item{edgelist}{A vector of edge relationships. Must be strictly organized (see
example for format).}

\item{node_labs}{A named character vector containing label names. Defaults
to `NULL`.}

\item{node_aes_opts}{A list feeding aesthetic options for nodes to
[DiagrammeR::node_aes()]. Defaults to empty list.}

\item{edge_aes_opts}{A list feeding aesthetic options for edges to
[DiagrammeR::edge_aes()]. Defaults to empty list.}

\item{verbose}{Indicate whether to print node and edge dataframes to the console.
See Details below. Defaults to `TRUE`.}

\item{check_dag}{Logical. Check whether the graph conforms to the rules of DAGs.
Defaults to `TRUE`.}

\item{theme}{Choose theme for plot output. Defaults to `"base"`. Setting theme to
`NULL` will use DiagrammeR's `NULL` attribute theme.}

\item{...}{Pass optional `conditioned` argument to [qd_themes()].}
}
\description{
Provide simple syntax specifying paths between nodes to generate a graph object.
}
\details{
Leaving the `verbose` set to `TRUE` may be advisable to ensure labels and IDs have
not been mismatched. By default, [qd_dag()] alphabetizes nodes included in `edgelist`
and does the same for `node_labs` under a first assumption that labels will begin with
the same letter as their corresponding `alpha_id`, which may not always be the case.
}
\examples{
# Provide a list of edges, with nodes specified as letters.
# Do not list a node as a parent more than once.
# Each line should contain a single edge character '->'.
edges <- c("A -> { B C }",
           "B -> C")

# make a DAG object and render the graph using the default theme
g.obj <- qd_dag(edges)
DiagrammeR::render_graph(g.obj)

# Pass labels and aesthetic options for nodes or edges
g.obj2 <- qd_dag(edges,
                 node.labs = c("A" = "Alcohol",
                               "B" = "BP",
                               "C" = "CVD"),
                 node.aes.opts = list(shape = "plaintext",
                                      fillcolor = "none",
                                      color = "black"),
                 edge.aes.opts = list(arrowsize = 0.5,
                                      color = "gray"),
                 theme = NULL)
DiagrammeR::render_graph(g.obj2)

}
