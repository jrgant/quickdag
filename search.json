[{"path":"https://jrgant.github.io/quickdag/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jason Gantenberg. Author, maintainer.","code":""},{"path":"https://jrgant.github.io/quickdag/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gantenberg J (2025). quickdag: Make Beautiful Directed Acyclic Graphs. R package version 0.2.1, https://github.com/jrgant/quickDAG.","code":"@Manual{,   title = {quickdag: Make Beautiful Directed Acyclic Graphs},   author = {Jason Gantenberg},   year = {2025},   note = {R package version 0.2.1},   url = {https://github.com/jrgant/quickDAG}, }"},{"path":"https://jrgant.github.io/quickdag/reference/qd_dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a graph object — qd_dag","title":"Generate a graph object — qd_dag","text":"Provide simple syntax specifying paths nodes generate graph object.","code":""},{"path":"https://jrgant.github.io/quickdag/reference/qd_dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a graph object — qd_dag","text":"","code":"qd_dag(   edgelist,   node_labs = NULL,   node_aes_opts = list(),   edge_aes_opts = list(),   verbose = TRUE,   check_dag = TRUE,   theme = \"base\",   ... )"},{"path":"https://jrgant.github.io/quickdag/reference/qd_dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a graph object — qd_dag","text":"edgelist vector edge relationships. Must strictly organized (see example format). node_labs named character vector containing label names. Defaults `NULL`. node_aes_opts list feeding aesthetic options nodes [DiagrammeR::node_aes()]. Defaults empty list. edge_aes_opts list feeding aesthetic options edges [DiagrammeR::edge_aes()]. Defaults empty list. verbose Indicate whether print node edge dataframes console. See Details . Defaults `TRUE`. check_dag Logical. Check whether graph conforms rules DAGs. Defaults `TRUE`. theme Choose theme plot output. Defaults `\"base\"`. Setting theme `NULL` use DiagrammeR's `NULL` attribute theme. ... Pass optional `conditioned` argument [qd_themes()].","code":""},{"path":"https://jrgant.github.io/quickdag/reference/qd_dag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a graph object — qd_dag","text":"Leaving `verbose` set `TRUE` may advisable ensure labels IDs mismatched. default, [qd_dag()] alphabetizes nodes included `edgelist` `node_labs` first assumption labels begin letter corresponding `alpha_id`, may always case.","code":""},{"path":"https://jrgant.github.io/quickdag/reference/qd_dag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a graph object — qd_dag","text":"","code":"# Provide a list of edges, with nodes specified as letters. # Do not list a node as a parent more than once. # Each line should contain a single edge character '->'. edges <- c(\"A -> { B C }\",            \"B -> C\")  # make a DAG object and render the graph using the default theme g.obj <- qd_dag(edges) #>  #>  #> CHECKED: The diagram is a DAG.  #> ------------------------------------------------------------------------- #> Make sure everything is matched up properly!  #> To stop printing data to the console, set 'verbose' to FALSE. #> ------------------------------------------------------------------------- #> ........................ NODE DATAFRAME ........................  #>  #>   id type label alpha_id #> 1  1 <NA>     A        A #> 2  2 <NA>     B        B #> 3  3 <NA>     C        C #>  #> ........................ EDGE DATAFRAME ........................  #>  #>   id from to  rel #> 1  1    1  2 <NA> #> 2  2    1  3 <NA> #> 3  3    2  3 <NA> DiagrammeR::render_graph(g.obj)  {\"x\":{\"diagram\":\"digraph {\\n\\ngraph [rankdir = \\\"LR\\\",\\n       layout = \\\"dot\\\"]\\n\\nnode [shape = \\\"plaintext\\\",\\n      penwidth = \\\"0.5\\\",\\n      fontname = \\\"serif\\\",\\n      width = \\\"0\\\",\\n      height = \\\"0\\\"]\\n\\nedge [arrowsize = \\\"0.4\\\",\\n     penwidth = \\\"0.5\\\"]\\n\\n  \\\"1\\\" [label = \\\"A\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"2\\\" [label = \\\"B\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"3\\\" [label = \\\"C\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"1\\\"->\\\"2\\\" \\n  \\\"1\\\"->\\\"3\\\" \\n  \\\"2\\\"->\\\"3\\\" \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]} # Pass labels and aesthetic options for nodes or edges g.obj2 <- qd_dag(edges,                  node_labs = c(\"A\" = \"Alcohol\",                                \"B\" = \"BP\",                                \"C\" = \"CVD\"),                  node_aes_opts = list(shape = \"plaintext\",                                       fillcolor = \"none\",                                       color = \"black\"),                  edge_aes_opts = list(arrowsize = 0.5,                                       color = \"gray\"),                  theme = NULL) #>  #>  #> CHECKED: The diagram is a DAG.  #> ------------------------------------------------------------------------- #> Make sure everything is matched up properly!  #> To stop printing data to the console, set 'verbose' to FALSE. #> ------------------------------------------------------------------------- #> ........................ NODE DATAFRAME ........................  #>  #>   id type   label     shape fillcolor color alpha_id #> 1  1 <NA> Alcohol plaintext      none black        A #> 2  2 <NA>      BP plaintext      none black        B #> 3  3 <NA>     CVD plaintext      none black        C #>  #> ........................ EDGE DATAFRAME ........................  #>  #>   id from to  rel arrowsize color #> 1  1    1  2 <NA>       0.5  gray #> 2  2    1  3 <NA>       0.5  gray #> 3  3    2  3 <NA>       0.5  gray DiagrammeR::render_graph(g.obj2)  {\"x\":{\"diagram\":\"digraph {\\n\\n\\n\\n\\n  \\\"1\\\" [label = \\\"Alcohol\\\", shape = \\\"plaintext\\\", fillcolor = \\\"#FFFFFE\\\", color = \\\"black\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"2\\\" [label = \\\"BP\\\", shape = \\\"plaintext\\\", fillcolor = \\\"#FFFFFE\\\", color = \\\"black\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"3\\\" [label = \\\"CVD\\\", shape = \\\"plaintext\\\", fillcolor = \\\"#FFFFFE\\\", color = \\\"black\\\", fontcolor = \\\"#000000\\\"] \\n\\\"1\\\"->\\\"2\\\" [arrowsize = \\\"0.5\\\", color = \\\"gray\\\"] \\n\\\"1\\\"->\\\"3\\\" [arrowsize = \\\"0.5\\\", color = \\\"gray\\\"] \\n\\\"2\\\"->\\\"3\\\" [arrowsize = \\\"0.5\\\", color = \\\"gray\\\"] \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://jrgant.github.io/quickdag/reference/qd_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Save graph objects as images — qd_save","title":"Save graph objects as images — qd_save","text":"[qd_save()] light wrapper around [DiagrammeR::export_graph()], enables exporting high-quality /scalable graphics print online. convenience computational notebooks like quarto RMarkdown documents, [qd_save()] also allows user embed image via [knitr::include_graphics()].","code":""},{"path":"https://jrgant.github.io/quickdag/reference/qd_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save graph objects as images — qd_save","text":"","code":"qd_save(graph, file_name, ..., embed = FALSE, kg = NULL)"},{"path":"https://jrgant.github.io/quickdag/reference/qd_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save graph objects as images — qd_save","text":"graph graph object produced [qd_dag()] file_name filename (possibly including path) save image. File type determined extension provided (pdf, svg, png, ps). See [DiagrammeR::export_graph()] details. ... Pass arguments [DiagrammeR::render_graph()]. embed Defaults `FALSE`. Automatically set `TRUE` [qd_embed()]. kg list allowing user set arguments [knitr::graphics()] (except `path`).","code":""},{"path":"https://jrgant.github.io/quickdag/reference/qd_save.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save graph objects as images — qd_save","text":"","code":"dag <- qd_dag(c(\"L -> {A Y}\", \"A -> Y\")) #>  #>  #> CHECKED: The diagram is a DAG.  #> ------------------------------------------------------------------------- #> Make sure everything is matched up properly!  #> To stop printing data to the console, set 'verbose' to FALSE. #> ------------------------------------------------------------------------- #> ........................ NODE DATAFRAME ........................  #>  #>   id type label alpha_id #> 1  1 <NA>     A        A #> 2  2 <NA>     L        L #> 3  3 <NA>     Y        Y #>  #> ........................ EDGE DATAFRAME ........................  #>  #>   id from to  rel #> 1  1    2  1 <NA> #> 2  2    2  3 <NA> #> 3  3    1  3 <NA> qd_save(dag, \"dag.pdf\")  # embed from code chunk using knitr::include_graphics() qd_save(dag, \"dag.pdf\", embed = TRUE) #> [1] \"dag.pdf\" #> attr(,\"class\") #> [1] \"knit_image_paths\" \"knit_asis\"         # `title` passed to DiagrammeR::export_graph() qd_save(dag, \"dag.pdf\", title = \"Demo\")"},{"path":"https://jrgant.github.io/quickdag/reference/qd_swig.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a single-world intervention graph (SWIG) — qd_swig","title":"Generate a single-world intervention graph (SWIG) — qd_swig","text":"Take DAG graph object , simplest case, create single-world intervention template corresponding world fixed nodes set given value. Alternatively, tell [qd_swig()] values fixed nodes set .","code":""},{"path":"https://jrgant.github.io/quickdag/reference/qd_swig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a single-world intervention graph (SWIG) — qd_swig","text":"","code":"qd_swig(   graph_obj,   fixed_nodes,   custom_values = NULL,   fixed_sep = \"vlin\",   sep_point_size = 15 )"},{"path":"https://jrgant.github.io/quickdag/reference/qd_swig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a single-world intervention graph (SWIG) — qd_swig","text":"graph_obj DAG object created [qd_dag()]. fixed_nodes vector containing nodes intervened upon. custom_values named vector containing alternative labels identifying explicit values fixed nodes (e.g., c(\"\" = \"1\")). fixed_sep character string indicating character use separator fixed nodes. Defaults \"vlin\". Run sep_opts(TRUE) available options. sep_point_size numerical value specifying point size fixed node separators.","code":""},{"path":"https://jrgant.github.io/quickdag/reference/qd_swig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a single-world intervention graph (SWIG) — qd_swig","text":"","code":"# Provide a DAG object and a list of nodes to be fixed library(magrittr) edges <- c(\"A -> Y\",            \"L -> { A Y }\")  dag  <- qd_dag(edges) #>  #>  #> CHECKED: The diagram is a DAG.  #> ------------------------------------------------------------------------- #> Make sure everything is matched up properly!  #> To stop printing data to the console, set 'verbose' to FALSE. #> ------------------------------------------------------------------------- #> ........................ NODE DATAFRAME ........................  #>  #>   id type label alpha_id #> 1  1 <NA>     A        A #> 2  2 <NA>     L        L #> 3  3 <NA>     Y        Y #>  #> ........................ EDGE DATAFRAME ........................  #>  #>   id from to  rel #> 1  1    1  3 <NA> #> 2  2    2  1 <NA> #> 3  3    2  3 <NA>  swig <- dag %>%         qd_swig(fixed.nodes = \"A\",                 custom.values = c(\"A\" = \"1\")) #> Error in qd_swig(., fixed.nodes = \"A\", custom.values = c(A = \"1\")): unused arguments (fixed.nodes = \"A\", custom.values = c(A = \"1\"))  swig %>% DiagrammeR::render_graph() #> Error: object 'swig' not found"},{"path":"https://jrgant.github.io/quickdag/reference/qd_themes.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagram themes — qd_themes","title":"Diagram themes — qd_themes","text":"Apply various pre-fabricated themes diagrams.","code":""},{"path":"https://jrgant.github.io/quickdag/reference/qd_themes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagram themes — qd_themes","text":"","code":"qd_themes(graph_obj, theme, ...)  theme_qd_base(graph_obj, font = \"serif\", ...)  theme_qd_circles(graph_obj, font = \"serif\", ...)  theme_qd_pearl(graph_obj, font = \"serif\", ...)  get_conditioned_nodes(graph_obj, conditioned = NULL)"},{"path":"https://jrgant.github.io/quickdag/reference/qd_themes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagram themes — qd_themes","text":"graph_obj DAG object created [qd_dag()]. theme character string indicating theme use. Defaults \"base\". Set `NULL` use GraphViz defaults. ... Pass arguments theme call (e.g., [theme_qd_base()]), `conditioned` `font`. font character vector indicating font family use node labels. Defaults \"serif\". conditioned character vector indicating nodes conditioned upon. shape nodes set \"square\".","code":""},{"path":"https://jrgant.github.io/quickdag/reference/qd_todagitty.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify variables for adjustment — qd_todagitty","title":"Identify variables for adjustment — qd_todagitty","text":"Format edgelist send dagitty identify variable adjustment sets.","code":""},{"path":"https://jrgant.github.io/quickdag/reference/qd_todagitty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify variables for adjustment — qd_todagitty","text":"","code":"qd_todagitty(   edgelist,   diagram_type = \"dag\",   showplot = FALSE,   send_global = FALSE,   dagitty_obj_name = NULL,   exposure,   outcome,   ... )"},{"path":"https://jrgant.github.io/quickdag/reference/qd_todagitty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify variables for adjustment — qd_todagitty","text":"edgelist vector edge relationships. Must strictly organized (see example format). diagram_type Character identifying diagram type. Defaults \"dag\", user can specify another graph type (see dagitty documentation). showplot Logical indicating whether produce dagitty plot. Defaults `FALSE`. send_global Logical indicating whether make dagitty object available global environment. Defaults `FALSE`. dagitty_obj_name Character specifying name dagitty object. used required `send_global = TRUE`. exposure Character. Specify exposure interest. (Required) outcome Character. Specifiy outcome interest. (Required) ... Pass arguments [dagitty::adjustmentSets()]. See dagitty documentation options.","code":""},{"path":"https://jrgant.github.io/quickdag/reference/qd_todagitty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify variables for adjustment — qd_todagitty","text":"`exposure` `outcome` options map dagitty functions name.","code":""},{"path":"https://jrgant.github.io/quickdag/reference/qd_todagitty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify variables for adjustment — qd_todagitty","text":"","code":"edges <- c(\"A -> { B C D }\",            \"B -> C\",            \"E -> { B C }\") # must pass exposure and outcome arguments to dagitty::adjustmentSets() qd_todagitty(edges, exposure = \"A\", outcome = \"C\") #>  {} qd_todagitty(edges, exposure = \"A\", outcome = \"C\", type = \"minimal\") #>  {}"},{"path":"https://jrgant.github.io/quickdag/reference/quickdag-package.html","id":null,"dir":"Reference","previous_headings":"","what":"quickdag: Make Beautiful Directed Acyclic Graphs — quickdag-package","title":"quickdag: Make Beautiful Directed Acyclic Graphs — quickdag-package","text":"package allows user save directed acyclic graphs (DAGs) generated DiagrammeR export pdf, png, svg format. Users may optionally choose view DAG without saving embed RMarkdown document. addition, quickDAG allows user easily reformat DAGs single-world intervention graph (SWIG) templates.","code":""},{"path":[]},{"path":"https://jrgant.github.io/quickdag/reference/quickdag-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"quickdag: Make Beautiful Directed Acyclic Graphs — quickdag-package","text":"Maintainer: Jason Gantenberg jason.gantenberg@gmail.com (ORCID)","code":""},{"path":"https://jrgant.github.io/quickdag/reference/sep_opts.html","id":null,"dir":"Reference","previous_headings":"","what":"View options for fixed node separator characters — sep_opts","title":"View options for fixed node separator characters — sep_opts","text":"Preview character options use fixed node separator SWIGs.","code":""},{"path":"https://jrgant.github.io/quickdag/reference/sep_opts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View options for fixed node separator characters — sep_opts","text":"","code":"sep_opts(table = FALSE)"},{"path":"https://jrgant.github.io/quickdag/reference/sep_opts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View options for fixed node separator characters — sep_opts","text":"table Logical show hide HTML table display available characters. Defaults `FALSE`.","code":""}]
